msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Sun May 18 22:22:08 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Levels.W01.L01
msgid "The Universal Axiom"
msgstr ""

#: Game.Levels.W01.L01
msgid "In mathematics, a `TopologicalSpace` is a `Set` paired\n"
"with a family of \"open subsets\". This family, called a topology,\n"
"must satisfy three axioms. The first is that the entire set itself\n"
"must be an open subset."
msgstr ""

#: Game.Levels.W01.L01
msgid "By definition, the universe `univ` is always open in a topological\n"
"space."
msgstr ""

#: Game.Levels.W01.L01
msgid "There's nothing to prove here. `IsOpen univ` is `exact`ly the\n"
"first axiom of `X` being a topological space.\n"
"\n"
"To say this in Lean, write `exact isOpen_univ`. The `exact`\n"
"tactic says that the goal is exactly a known fact. Then `isOpen_univ`\n"
"specifically says that the universe of a topological space is open."
msgstr ""

#: Game.Levels.W01.L01
msgid "Great first proof!"
msgstr ""

#: Game.Levels.W01.L02
msgid "The Intersection Axiom"
msgstr ""

#: Game.Levels.W01.L02
msgid "The next axiom of topological spaces is that\n"
"every pair of open sets must have an open intersection."
msgstr ""

#: Game.Levels.W01.L02
msgid "By definition, the intersection of two open sets is open."
msgstr ""

#: Game.Levels.W01.L02
msgid "Again, we have little to prove here: this should just be\n"
"intersection axiom. The way this theorem is stated\n"
"in Lean is a little different than the way it's expressed here, however.\n"
"(Try typing `exact IsOpen.inter` and see what happens!)\n"
"\n"
"So it's not `exact`ly the same, but `IsOpen.inter` is certainly still\n"
"applicable! In fact, we can use the `apply` tactic here rather than\n"
"`exact`..."
msgstr ""

#: Game.Levels.W01.L02
msgid "Great! By `apply`ing `IsOpen.inter`, you've reduced our goal of\n"
"`IsOpen (U ∩ V)` into two subgoals, which are `exact`ly our\n"
"two assumptions `U_open` and `V_open`.\n"
"So use two `exact` statements to complete\n"
"this proof."
msgstr ""

#: Game.Levels.W01.L02
msgid "Good work!"
msgstr ""

#: Game.Levels.W01.L03
msgid "Proving Something New!"
msgstr ""

#: Game.Levels.W01.L03
msgid "Of course, if the intersection of two opens must be open,\n"
"we should be able to prove three open sets have open intersection."
msgstr ""

#: Game.Levels.W01.L03
msgid "You should be able to do this with two `apply`s and three `exact`s."
msgstr ""

#: Game.Levels.W01.L03
msgid "Awesome job!"
msgstr ""

#: Game.Levels.W01.L04
msgid "Inductive Arguments"
msgstr ""

#: Game.Levels.W01.L04
msgid "We could now prove `IsOpen (U ∩ V ∩ W ∩ S)`, but the smarter play\n"
"is to prove any finite intersection is open."
msgstr ""

#: Game.Levels.W01.L04
msgid "Splits up an intersection over a successor ordinal into a binary\n"
"intersection of with the last element and the rest of the intersection."
msgstr ""

#: Game.Levels.W01.L04
msgid "Informally, in this scenario we have $n \\in \\mathbb{N}$,\n"
"and open sets $U_n$ for all $n \\in \\mathbb{N}$.\n"
"We wish to prove that $\\bigcap_{m<n} U_m$ is open."
msgstr ""

#: Game.Levels.W01.L04
msgid "To prove this, we will need to use induction. This is possible\n"
"using mathlib's `induction'` tactic. (There is also an `induction` tactic,\n"
"but this variation allows for a cleaner proof.) Try using\n"
"`induction' n with n ind_hyp` to split your goal into a base case and\n"
"a successor case."
msgstr ""

#: Game.Levels.W01.L04
msgid "This base case $\\bigcap_{m<0} U_m$ is trivial, which is a great\n"
"opportunity to show off mathlib's `simp` tactic. Just run `simp`\n"
"and Lean will automatically prove this trivial base case for us by\n"
"realizing $\\bigcap_{m<0} U_m$\n"
"is an intersection over an empty collection, and is thus equal to `univ`,\n"
"which is always open."
msgstr ""

#: Game.Levels.W01.L04
msgid "Now here, `simp` is not smart enough to prove this case for us (try it).\n"
"However, we can use the `biInter_lt_succ` lemma that\n"
"$\\bigcap_{m<n+1} U_m = (\\bigcap_{m<n} U_m) \\cap U_n$ to `rewrite` the goal\n"
"into a binary intersection which we can handle given our induction hypothesis.\n"
"Try `rw [biInter_lt_succ]` to see how this works."
msgstr ""

#: Game.Levels.W01.L04
msgid "Now we can `apply` the basic fact that the intersection of two open sets is open."
msgstr ""

#: Game.Levels.W01.L04
msgid "This is exactly our induction hypothesis, which we named `ind_hyp`."
msgstr ""

#: Game.Levels.W01.L04
msgid "Here we can `apply` the hypothesis `U_open`, or we could note that\n"
"this is `exact`ly `U_open` for the value of `n`, that is, `exact U_open n`."
msgstr ""

#: Game.Levels.W01.L04
msgid "Awesome job!"
msgstr ""

#: Game.Levels.W01.L05
msgid "The Union Axiom"
msgstr ""

#: Game.Levels.W01.L05
msgid "Finally, we have `isOpen_sUnion`: the arbitrary union of open sets is open."
msgstr ""

#: Game.Levels.W01.L05
msgid "By definition, the union of any family of open sets is open."
msgstr ""

#: Game.Levels.W01.L05
msgid "Proof that `⋃₀ \\{U, V} = U ∪ V`."
msgstr ""

#: Game.Levels.W01.L05
msgid "So of course, a finite union of open sets should be open. To convince\n"
"Lean of this, we will need to first convert this binary union `U ∪ V` into the union\n"
"of a set: `⋃₀ {U, V}`."
msgstr ""

#: Game.Levels.W01.L05
msgid "The fact that $\\bigcup \\{U, V\\} = U \\cup V$ is captured by `sUnion_pair U V`, but the\n"
"rewrite (`rw`) tactic only tries to rewrite expressions on the left side of the `=`\n"
"with expressions on the right. This can be handled by using `rw [← sUnion_pair U V]`\n"
"rather than `rw [sUnionpair U V]`.\n"
"(To type the `←`, type `\\l` and press space.)"
msgstr ""

#: Game.Levels.W01.L05
msgid "Now we can apply the union axiom for topological spaces."
msgstr ""

#: Game.Levels.W01.L05
msgid "Logically, we can see that we need to check two cases,\n"
"$t=U$ and $t=V$. One way to do this in Lean is the `rintro`\n"
"tactic. Use `rintro t (rfl | rfl)` to split your goal into\n"
"these cases."
msgstr ""

#: Game.Levels.W01.L05
msgid "This allows us to first prove the case $t=U$,\n"
"and then prove the case $t=V$."
msgstr ""

#: Game.Levels.W01.L05
msgid "Awesome job!"
msgstr ""

#: Game.Levels.W01.L06
msgid "An Empty Feeling"
msgstr ""

#: Game.Levels.W01.L06
msgid "You might think we forgot a common \"axiom\" of topological\n"
"spaces: the empty set must always be open. But in fact, this\n"
"is guaranteed by the other three axioms."
msgstr ""

#: Game.Levels.W01.L06
msgid "Proof that `⋃₀ ∅ = ∅`."
msgstr ""

#: Game.Levels.W01.L06
msgid "You can use `sUnion_empty` to rewrite this goal into a goal\n"
"that can be addressed by one of the three axioms."
msgstr ""

#: Game.Levels.W01.L06
msgid "Now apply the right topological axiom."
msgstr ""

#: Game.Levels.W01.L06
msgid "Hmm, this seems rather trivial! Maybe Lean can knock this out\n"
"with one word?"
msgstr ""

#: Game.Levels.W01.L06
msgid "Awesome job!"
msgstr ""

#: Game.Levels.W01.AxiomWorld
msgid "Axiom World"
msgstr ""

#: Game.Levels.W01.AxiomWorld
msgid "Let's get started by exploring the three basic axioms for\n"
"topological axioms."
msgstr ""

#: Game.Levels.W02.L01
msgid "A Very Simple Example"
msgstr ""

#: Game.Levels.W02.L01
msgid "foo"
msgstr ""

#: Game.Levels.W02.L01
msgid "Great first proof!"
msgstr ""

#: Game.Levels.W02.ExampleWorld
msgid "Example World"
msgstr ""

#: Game.Levels.W02.ExampleWorld
msgid "Now let's try actually constructing some examples of\n"
"topological spaces!"
msgstr ""

#: Game
msgid "Topology Game"
msgstr ""

#: Game
msgid "Welcome to the Topology Game! During this game, you will\n"
"learn an introduction to the Lean theorem prover in the context\n"
"of introductory topology."
msgstr ""

#: Game
msgid "This game is a work in progress.\n"
"\n"
"(c) 2025 Steven Clontz and Jim Fowler\n"
"\n"
"<https://github.com/kisonecat/topology-game>"
msgstr ""

#: Game
msgid "Topology Game"
msgstr ""

#: Game
msgid "An introduction to Lean using topology."
msgstr ""
